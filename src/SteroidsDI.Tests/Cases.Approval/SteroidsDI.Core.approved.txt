namespace SteroidsDI.Core
{
    public static class GenericScope<T>
    {
        public static System.IDisposable? CurrentScope { get; set; }
    }
    public interface IScopeFactory
    {
        System.IDisposable CreateScope();
    }
    public interface IScopeProvider
    {
        System.IServiceProvider? GetScopedServiceProvider(System.IServiceProvider rootProvider);
    }
    public readonly struct Scoped : System.IDisposable
    {
        public Scoped(System.Type type, SteroidsDI.Core.IScopeFactory scopeFactory) { }
        public System.IDisposable Scope { get; }
        public void Dispose() { }
    }
    public readonly struct Scoped<T> : System.IDisposable
    {
        public Scoped(SteroidsDI.Core.IScopeFactory scopeFactory) { }
        public System.IDisposable Scope { get; }
        public void Dispose() { }
    }
}
namespace System
{
    public abstract class Defer<T> : System.IDefer<T> { }
    public interface IDefer<out T> { }
}